{"version":3,"file":"db.js","sourceRoot":"","sources":["../../src/config/db.ts"],"names":[],"mappings":";;;;;AAAA,0DAAkC;AAClC,oDAA2B;AAC3B,gBAAM,CAAC,MAAM,EAAE,CAAA;AAEf,MAAqB,QAAQ;IAEzB,EAAE,CAAS;IACX,IAAI,CAAS;IACb,QAAQ,CAAS;IACjB,IAAI,CAAS;IACb,IAAI,CAAS;IACb,OAAO,CAAS;IAChB,OAAO,CAAS;IAChB,QAAQ,CAAsB;IAE9B;QACI,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,SAAS,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,SAAS,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,SAAS,CAAC;QACjD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,SAAS,CAAC;QAC7C,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAClD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEjD,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAS,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE;YAC7D,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE;gBACZ,OAAO,EAAE,IAAI;aAChB;YACD,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,KAAK;YACd,gBAAgB,EAAE,KAAK;YACvB,IAAI,EAAE;gBACF,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,GAAG,EAAE,IAAI,CAAC,OAAO;gBACjB,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,KAAK;aACd;SACJ,CAAC,CAAA;QAEF,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;aACvB,IAAI,CAAC,GAAG,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QACjE,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,CAAC,EAAE;YACT,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACf,iFAAiF;QACjF,cAAc;SACjB,CAAC,CAAA;IACN,CAAC;CACJ;AAlDD,2BAkDC","sourcesContent":["import sequelize from 'sequelize';\nimport dotenv from 'dotenv'\ndotenv.config()\n\nexport default class Database {\n\n    db: string;\n    user: string;\n    password: string;\n    host: string;\n    port: number;\n    maxPool: number;\n    minPool: number;\n    database: sequelize.Sequelize;\n\n    constructor() {\n        this.db = process.env.DB_NAME || 'db_name';\n        this.user = process.env.DB_USER || 'db_user';\n        this.password = process.env.DB_PASS || 'db_pass';\n        this.host = process.env.DB_HOST || 'db_host';\n        this.port = Number(process.env.DB_PORT) || 1433;\n        this.maxPool = Number(process.env.MAX_POOL) || 10;\n        this.minPool = Number(process.env.MIN_POOL) || 1;\n\n        this.database = new sequelize(this.db, this.user, this.password, {\n            host: this.host,\n            dialect: 'mssql',\n            dialectOptions: {\n                encrypt: true\n            },\n            port: this.port,\n            logging: false,\n            operatorsAliases: false,\n            pool: {\n                max: this.maxPool,\n                min: this.minPool,\n                acquire: 30000,\n                idle: 10000\n            }\n        })\n\n        this.database.authenticate()\n            .then(() => {\n                console.log('Connection has been established successfully.');\n            })\n            .catch(err => {\n                console.error('Unable to connect to the database:', err);\n            });\n\n        this.database.sync({\n            // Using 'force' will drop any table defined in the models and create them again.\n            // force: true\n        })\n    }\n}"]}