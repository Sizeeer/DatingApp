{"version":3,"file":"user.js","sourceRoot":"","sources":["../../src/controllers/user.ts"],"names":[],"mappings":";;;AACA,yCAAqD;AAErD,MAAa,cAAc;IAEvB,gBAAgB,CAAC;IAEjB,OAAO,CAAC,GAAY,EAAE,GAAa;QAC/B,WAAI,CAAC,OAAO,EAAE;aACT,IAAI,CAAC,CAAC,KAAsB,EAAE,EAAE;YAC7B,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;YAChB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,IAAI,CAAC,GAAY,EAAE,GAAa;QAC5B,WAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;aACvB,IAAI,CAAC,CAAC,IAA0B,EAAE,EAAE;YACjC,IAAI,IAAI,EAAE;gBACN,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;iBAAM;gBACH,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;aAC1B;QACL,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;YAChB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,MAAM,CAAC,GAAY,EAAE,GAAa;QAC9B,WAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aAChB,IAAI,CAAC,CAAC,IAAmB,EAAE,EAAE;YAC1B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;YAChB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,MAAM,CAAC,GAAY,EAAE,GAAa;QAC9B,WAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;YAClB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YAC7B,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;SAC/B,CAAC,CAAC,IAAI,CAAC,CAAC,YAAuC,EAAE,EAAE;YAChD,GAAG,CAAC,IAAI,CAAC;gBACL,YAAY,EAAE,MAAM,CAAC,YAAY,CAAC;aACrC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;YAClB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAA;IACN,CAAC;IAED,MAAM,CAAC,GAAY,EAAE,GAAa;QAC9B,WAAI,CAAC,OAAO,CAAC;YACT,KAAK,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;SAC/B,CAAC;aACG,IAAI,CAAC,CAAC,WAAmB,EAAE,EAAE;YAC1B,GAAG,CAAC,IAAI,CAAC;gBACL,WAAW,EAAE,WAAW;aAC3B,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;YAClB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAA;IAEV,CAAC;CACJ;AAhED,wCAgEC","sourcesContent":["import { Request, Response } from 'express';\nimport { User, UserInterface } from '../models/user';\n\nexport class UserController {\n\n    constructor() { }\n\n    readAll(req: Request, res: Response) {\n        User.findAll()\n            .then((users: UserInterface[]) => {\n                res.json(users);\n            })\n            .catch((err: any) => {\n                res.json(err);\n            });\n    }\n\n    read(req: Request, res: Response) {\n        User.findById(req.params.id)\n            .then((user: UserInterface | null) => {\n                if (user) {\n                    res.json(user);\n                } else {\n                    res.status(204).send();\n                }\n            })\n            .catch((err: any) => {\n                res.json(err);\n            });\n    }\n\n    create(req: Request, res: Response) {\n        User.create(req.body)\n            .then((user: UserInterface) => {\n                res.json(user);\n            })\n            .catch((err: any) => {\n                res.json(err);\n            });\n    }\n\n    update(req: Request, res: Response) {\n        User.update(req.body, {\n            fields: Object.keys(req.body),\n            where: { id: req.params.id }\n        }).then((affectedRows: [number, UserInterface[]]) => {\n            res.json({\n                affectedRows: Number(affectedRows)\n            });\n        }).catch((err: any) => {\n            res.json(err);\n        })\n    }\n\n    delete(req: Request, res: Response) {\n        User.destroy({\n            where: { id: req.params.id }\n        })\n            .then((removedRows: number) => {\n                res.json({\n                    removedRows: removedRows\n                });\n            }).catch((err: any) => {\n                res.json(err);\n            })\n\n    }\n}"]}